import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import axios from 'axios';
import toast from 'react-hot-toast';
import {
  UserIcon,
  CameraIcon,
  BellIcon,
  ShieldCheckIcon,
  CreditCardIcon,
  EyeIcon,
  EyeSlashIcon,
  DocumentTextIcon,
  MapPinIcon,
  LanguageIcon,
  BriefcaseIcon,
  ClockIcon,
  TrashIcon
} from '@heroicons/react/24/outline';
import FileUpload from '../components/common/FileUpload';
import ImageGallery from '../components/common/ImageGallery';
import uploadService from '../services/uploadService';

interface UserProfile {
  name: string;
  email: string;
  phone?: string;
  bio?: string;
  location?: string;
  hourly_rate?: number;
  images: string[];
  services_offered: string[];
  languages: string[];
  availability: Record<string, Array<{ start_time: string; end_time: string }>>;
  verification_status: string;
}

interface NotificationSettings {
  email_notifications: boolean;
  sms_notifications: boolean;
  booking_updates: boolean;
  marketing_emails: boolean;
  chat_notifications: boolean;
}

interface PasswordChange {
  current_password: string;
  new_password: string;
  confirm_password: string;
}

const Settings: React.FC = () => {
  const { user, updateUser } = useAuth();
  const [activeTab, setActiveTab] = useState<'profile' | 'notifications' | 'security' | 'privacy'>('profile');
  const [profile, setProfile] = useState<UserProfile>({
    name: '',
    email: '',
    phone: '',
    bio: '',
    location: '',
    hourly_rate: 0,
    images: [],
    services_offered: [],
    languages: [],
    availability: {},
    verification_status: 'pending'
  });
  const [notifications, setNotifications] = useState<NotificationSettings>({
    email_notifications: true,
    sms_notifications: false,
    booking_updates: true,
    marketing_emails: false,
    chat_notifications: true
  });
  const [passwordData, setPasswordData] = useState<PasswordChange>({
    current_password: '',
    new_password: '',
    confirm_password: ''
  });
  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [newService, setNewService] = useState('');\n  const [newLanguage, setNewLanguage] = useState('');\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n\n  const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\n  useEffect(() => {\n    fetchProfile();\n  }, []);\n\n  const fetchProfile = async () => {\n    try {\n      setLoading(true);\n      let profileData;\n      \n      if (user?.role === 'provider') {\n        const response = await axios.get('/api/v1/providers/my-profile');\n        profileData = response.data;\n      } else {\n        // For seekers, we might have a different endpoint or use user data\n        profileData = {\n          name: user?.email?.split('@')[0] || '',\n          email: user?.email || '',\n          images: [],\n          services_offered: [],\n          languages: [],\n          availability: {},\n          verification_status: 'pending'\n        };\n      }\n      \n      setProfile({\n        ...profile,\n        ...profileData\n      });\n    } catch (error: any) {\n      console.error('Error fetching profile:', error);\n      if (error.response?.status !== 404) {\n        toast.error('Failed to load profile data');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleProfileUpdate = async () => {\n    try {\n      setSaving(true);\n      \n      const updateData = {\n        name: profile.name,\n        bio: profile.bio,\n        location: profile.location,\n        hourly_rate: user?.role === 'provider' ? profile.hourly_rate : undefined,\n        services_offered: profile.services_offered,\n        languages: profile.languages,\n        availability: profile.availability\n      };\n\n      if (user?.role === 'provider') {\n        await axios.put('/api/v1/providers/my-profile', updateData);\n      } else {\n        // For seekers, update basic info\n        await axios.put('/api/v1/auth/profile', {\n          name: profile.name,\n          bio: profile.bio,\n          location: profile.location\n        });\n      }\n      \n      toast.success('Profile updated successfully');\n      \n      // Update user context if name changed\n      if (profile.name !== user?.email?.split('@')[0]) {\n        updateUser({ ...user, name: profile.name } as any);\n      }\n    } catch (error: any) {\n      console.error('Profile update error:', error);\n      toast.error(error.response?.data?.detail || 'Failed to update profile');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handlePasswordChange = async () => {\n    if (passwordData.new_password !== passwordData.confirm_password) {\n      toast.error('New passwords do not match');\n      return;\n    }\n\n    if (passwordData.new_password.length < 8) {\n      toast.error('New password must be at least 8 characters long');\n      return;\n    }\n\n    try {\n      setSaving(true);\n      await axios.put('/api/v1/auth/change-password', {\n        current_password: passwordData.current_password,\n        new_password: passwordData.new_password\n      });\n      \n      toast.success('Password changed successfully');\n      setPasswordData({\n        current_password: '',\n        new_password: '',\n        confirm_password: ''\n      });\n    } catch (error: any) {\n      console.error('Password change error:', error);\n      toast.error(error.response?.data?.detail || 'Failed to change password');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleFileUpload = async (files: File[]) => {\n    setSelectedFiles(files);\n  };\n\n  const uploadImages = async () => {\n    if (selectedFiles.length === 0) return;\n\n    try {\n      setSaving(true);\n      const response = await uploadService.uploadBulkProfileImages(selectedFiles);\n      \n      if (response.success && response.uploaded_images) {\n        const newImageUrls = response.uploaded_images.map(img => img.url);\n        setProfile(prev => ({\n          ...prev,\n          images: [...prev.images, ...newImageUrls]\n        }));\n        setSelectedFiles([]);\n      }\n    } catch (error) {\n      console.error('Upload error:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const removeImage = async (index: number) => {\n    try {\n      await uploadService.deleteProfileImage(index);\n      setProfile(prev => ({\n        ...prev,\n        images: prev.images.filter((_, i) => i !== index)\n      }));\n    } catch (error) {\n      console.error('Delete error:', error);\n    }\n  };\n\n  const addService = () => {\n    if (newService.trim() && !profile.services_offered.includes(newService.trim())) {\n      setProfile(prev => ({\n        ...prev,\n        services_offered: [...prev.services_offered, newService.trim()]\n      }));\n      setNewService('');\n    }\n  };\n\n  const removeService = (index: number) => {\n    setProfile(prev => ({\n      ...prev,\n      services_offered: prev.services_offered.filter((_, i) => i !== index)\n    }));\n  };\n\n  const addLanguage = () => {\n    if (newLanguage.trim() && !profile.languages.includes(newLanguage.trim())) {\n      setProfile(prev => ({\n        ...prev,\n        languages: [...prev.languages, newLanguage.trim()]\n      }));\n      setNewLanguage('');\n    }\n  };\n\n  const removeLanguage = (index: number) => {\n    setProfile(prev => ({\n      ...prev,\n      languages: prev.languages.filter((_, i) => i !== index)\n    }));\n  };\n\n  const addTimeSlot = (day: string) => {\n    const startTime = (document.getElementById(`${day}-start`) as HTMLInputElement)?.value;\n    const endTime = (document.getElementById(`${day}-end`) as HTMLInputElement)?.value;\n    \n    if (startTime && endTime) {\n      setProfile(prev => ({\n        ...prev,\n        availability: {\n          ...prev.availability,\n          [day]: [\n            ...(prev.availability[day] || []),\n            { start_time: startTime, end_time: endTime }\n          ]\n        }\n      }));\n      \n      // Clear inputs\n      (document.getElementById(`${day}-start`) as HTMLInputElement).value = '';\n      (document.getElementById(`${day}-end`) as HTMLInputElement).value = '';\n    }\n  };\n\n  const removeTimeSlot = (day: string, index: number) => {\n    setProfile(prev => ({\n      ...prev,\n      availability: {\n        ...prev.availability,\n        [day]: prev.availability[day]?.filter((_, i) => i !== index) || []\n      }\n    }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex items-center justify-center min-h-96\">\n          <div className=\"loading-spinner\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-white mb-2\">Account Settings</h1>\n        <p className=\"text-gray-400\">Manage your profile, preferences, and security settings</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n        {/* Sidebar */}\n        <div className=\"lg:col-span-1\">\n          <div className=\"card-premium\">\n            <nav className=\"space-y-2\">\n              {[\n                { id: 'profile', name: 'Profile', icon: UserIcon },\n                { id: 'notifications', name: 'Notifications', icon: BellIcon },\n                { id: 'security', name: 'Security', icon: ShieldCheckIcon },\n                { id: 'privacy', name: 'Privacy', icon: DocumentTextIcon }\n              ].map((tab) => {\n                const Icon = tab.icon;\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id as any)}\n                    className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-colors ${\n                      activeTab === tab.id\n                        ? 'bg-sensual-red text-white'\n                        : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n                    }`}\n                  >\n                    <Icon className=\"w-5 h-5 mr-3\" />\n                    {tab.name}\n                  </button>\n                );\n              })}\n            </nav>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"lg:col-span-3\">\n          <div className=\"card-premium\">\n            {/* Profile Tab */}\n            {activeTab === 'profile' && (\n              <div className=\"space-y-8\">\n                <div>\n                  <h2 className=\"text-2xl font-semibold text-white mb-6\">Profile Information</h2>\n                  \n                  {/* Basic Info */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                        Full Name\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={profile.name}\n                        onChange={(e) => setProfile(prev => ({ ...prev, name: e.target.value }))}\n                        className=\"w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white focus:outline-none focus:border-sensual-red\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                        Email\n                      </label>\n                      <input\n                        type=\"email\"\n                        value={profile.email}\n                        disabled\n                        className=\"w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-gray-400 cursor-not-allowed\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                        Phone Number\n                      </label>\n                      <input\n                        type=\"tel\"\n                        value={profile.phone || ''}\n                        onChange={(e) => setProfile(prev => ({ ...prev, phone: e.target.value }))}\n                        className=\"w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white focus:outline-none focus:border-sensual-red\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                        <MapPinIcon className=\"w-4 h-4 inline mr-1\" />\n                        Location\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={profile.location || ''}\n                        onChange={(e) => setProfile(prev => ({ ...prev, location: e.target.value }))}\n                        className=\"w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white focus:outline-none focus:border-sensual-red\"\n                        placeholder=\"City, Country\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Bio */}\n                  <div className=\"mb-8\">\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Bio\n                    </label>\n                    <textarea\n                      value={profile.bio || ''}\n                      onChange={(e) => setProfile(prev => ({ ...prev, bio: e.target.value }))}\n                      rows={4}\n                      className=\"w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white focus:outline-none focus:border-sensual-red\"\n                      placeholder=\"Tell others about yourself...\"\n                    />\n                  </div>\n\n                  {/* Provider-specific fields */}\n                  {user?.role === 'provider' && (\n                    <>\n                      {/* Hourly Rate */}\n                      <div className=\"mb-8\">\n                        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                          <CreditCardIcon className=\"w-4 h-4 inline mr-1\" />\n                          Hourly Rate (tokens)\n                        </label>\n                        <input\n                          type=\"number\"\n                          value={profile.hourly_rate || 0}\n                          onChange={(e) => setProfile(prev => ({ ...prev, hourly_rate: Number(e.target.value) }))}\n                          min=\"1\"\n                          className=\"w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white focus:outline-none focus:border-sensual-red\"\n                        />\n                      </div>\n\n                      {/* Profile Images */}\n                      <div className=\"mb-8\">\n                        <h3 className=\"text-lg font-medium text-white mb-4\">\n                          <CameraIcon className=\"w-5 h-5 inline mr-2\" />\n                          Profile Images\n                        </h3>\n                        \n                        {profile.images.length > 0 && (\n                          <div className=\"mb-6\">\n                            <ImageGallery\n                              images={profile.images}\n                              allowRemove={true}\n                              onImageRemove={removeImage}\n                              className=\"mb-4\"\n                            />\n                          </div>\n                        )}\n                        \n                        <FileUpload\n                          onFileSelect={handleFileUpload}\n                          accept=\"image/*\"\n                          multiple={true}\n                          maxFiles={5}\n                          uploadType=\"image\"\n                          currentFiles={profile.images}\n                        />\n                        \n                        {selectedFiles.length > 0 && (\n                          <button\n                            onClick={uploadImages}\n                            disabled={saving}\n                            className=\"mt-4 btn-primary\"\n                          >\n                            {saving ? 'Uploading...' : `Upload ${selectedFiles.length} Image${selectedFiles.length > 1 ? 's' : ''}`}\n                          </button>\n                        )}\n                      </div>\n\n                      {/* Services Offered */}\n                      <div className=\"mb-8\">\n                        <h3 className=\"text-lg font-medium text-white mb-4\">\n                          <BriefcaseIcon className=\"w-5 h-5 inline mr-2\" />\n                          Services Offered\n                        </h3>\n                        \n                        <div className=\"flex flex-wrap gap-2 mb-4\">\n                          {profile.services_offered.map((service, index) => (\n                            <span\n                              key={index}\n                              className=\"bg-gray-800 text-gray-300 px-3 py-1 rounded-full text-sm flex items-center\"\n                            >\n                              {service}\n                              <button\n                                onClick={() => removeService(index)}\n                                className=\"ml-2 text-red-400 hover:text-red-300\"\n                              >\n                                <TrashIcon className=\"w-4 h-4\" />\n                              </button>\n                            </span>\n                          ))}\n                        </div>\n                        \n                        <div className=\"flex space-x-2\">\n                          <input\n                            type=\"text\"\n                            value={newService}\n                            onChange={(e) => setNewService(e.target.value)}\n                            placeholder=\"Add a service...\"\n                            className=\"flex-1 bg-gray-800 border border-gray-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-sensual-red\"\n                            onKeyPress={(e) => e.key === 'Enter' && addService()}\n                          />\n                          <button\n                            onClick={addService}\n                            className=\"btn-primary px-4 py-2\"\n                          >\n                            Add\n                          </button>\n                        </div>\n                      </div>\n\n                      {/* Languages */}\n                      <div className=\"mb-8\">\n                        <h3 className=\"text-lg font-medium text-white mb-4\">\n                          <LanguageIcon className=\"w-5 h-5 inline mr-2\" />\n                          Languages\n                        </h3>\n                        \n                        <div className=\"flex flex-wrap gap-2 mb-4\">\n                          {profile.languages.map((language, index) => (\n                            <span\n                              key={index}\n                              className=\"bg-gray-800 text-gray-300 px-3 py-1 rounded-full text-sm flex items-center\"\n                            >\n                              {language}\n                              <button\n                                onClick={() => removeLanguage(index)}\n                                className=\"ml-2 text-red-400 hover:text-red-300\"\n                              >\n                                <TrashIcon className=\"w-4 h-4\" />\n                              </button>\n                            </span>\n                          ))}\n                        </div>\n                        \n                        <div className=\"flex space-x-2\">\n                          <input\n                            type=\"text\"\n                            value={newLanguage}\n                            onChange={(e) => setNewLanguage(e.target.value)}\n                            placeholder=\"Add a language...\"\n                            className=\"flex-1 bg-gray-800 border border-gray-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-sensual-red\"\n                            onKeyPress={(e) => e.key === 'Enter' && addLanguage()}\n                          />\n                          <button\n                            onClick={addLanguage}\n                            className=\"btn-primary px-4 py-2\"\n                          >\n                            Add\n                          </button>\n                        </div>\n                      </div>\n\n                      {/* Availability Schedule */}\n                      <div className=\"mb-8\">\n                        <h3 className=\"text-lg font-medium text-white mb-4\">\n                          <ClockIcon className=\"w-5 h-5 inline mr-2\" />\n                          Availability Schedule\n                        </h3>\n                        \n                        <div className=\"space-y-4\">\n                          {daysOfWeek.map((day) => (\n                            <div key={day} className=\"bg-gray-800 rounded-lg p-4\">\n                              <h4 className=\"text-white font-medium mb-3 capitalize\">{day}</h4>\n                              \n                              {/* Existing time slots */}\n                              <div className=\"space-y-2 mb-4\">\n                                {(profile.availability[day] || []).map((slot, index) => (\n                                  <div key={index} className=\"flex items-center justify-between bg-gray-700 rounded p-3\">\n                                    <span className=\"text-gray-300\">\n                                      {slot.start_time} - {slot.end_time}\n                                    </span>\n                                    <button\n                                      onClick={() => removeTimeSlot(day, index)}\n                                      className=\"text-red-400 hover:text-red-300\"\n                                    >\n                                      <TrashIcon className=\"w-4 h-4\" />\n                                    </button>\n                                  </div>\n                                ))}\n                              </div>\n                              \n                              {/* Add new time slot */}\n                              <div className=\"flex items-center space-x-2\">\n                                <input\n                                  id={`${day}-start`}\n                                  type=\"time\"\n                                  className=\"bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white text-sm focus:outline-none focus:border-sensual-red\"\n                                />\n                                <span className=\"text-gray-400\">to</span>\n                                <input\n                                  id={`${day}-end`}\n                                  type=\"time\"\n                                  className=\"bg-gray-700 border border-gray-600 rounded px-3 py-2 text-white text-sm focus:outline-none focus:border-sensual-red\"\n                                />\n                                <button\n                                  onClick={() => addTimeSlot(day)}\n                                  className=\"btn-secondary px-3 py-2 text-sm\"\n                                >\n                                  Add\n                                </button>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </>\n                  )}\n\n                  {/* Save Button */}\n                  <div className=\"flex justify-end\">\n                    <button\n                      onClick={handleProfileUpdate}\n                      disabled={saving}\n                      className=\"btn-primary px-8 py-3\"\n                    >\n                      {saving ? 'Saving...' : 'Save Changes'}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Notifications Tab */}\n            {activeTab === 'notifications' && (\n              <div className=\"space-y-6\">\n                <h2 className=\"text-2xl font-semibold text-white mb-6\">Notification Preferences</h2>\n                \n                <div className=\"space-y-4\">\n                  {Object.entries({\n                    email_notifications: 'Email Notifications',\n                    sms_notifications: 'SMS Notifications',\n                    booking_updates: 'Booking Updates',\n                    chat_notifications: 'Chat Messages',\n                    marketing_emails: 'Marketing Emails'\n                  }).map(([key, label]) => (\n                    <div key={key} className=\"flex items-center justify-between py-4 border-b border-gray-700\">\n                      <div>\n                        <h3 className=\"text-white font-medium\">{label}</h3>\n                        <p className=\"text-gray-400 text-sm\">\n                          {key === 'booking_updates' && 'Get notified about booking confirmations, cancellations, and changes'}\n                          {key === 'chat_notifications' && 'Receive notifications when you get new messages'}\n                          {key === 'email_notifications' && 'General notifications sent to your email'}\n                          {key === 'sms_notifications' && 'Text message notifications (charges may apply)'}\n                          {key === 'marketing_emails' && 'Promotional emails and platform updates'}\n                        </p>\n                      </div>\n                      <label className=\"relative inline-flex items-center cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          checked={notifications[key as keyof NotificationSettings]}\n                          onChange={(e) => setNotifications(prev => ({\n                            ...prev,\n                            [key]: e.target.checked\n                          }))}\n                          className=\"sr-only peer\"\n                        />\n                        <div className=\"w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-sensual-red\"></div>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"flex justify-end\">\n                  <button className=\"btn-primary px-8 py-3\">\n                    Save Preferences\n                  </button>\n                </div>\n              </div>\n            )}\n\n            {/* Security Tab */}\n            {activeTab === 'security' && (\n              <div className=\"space-y-8\">\n                <h2 className=\"text-2xl font-semibold text-white mb-6\">Security Settings</h2>\n                \n                {/* Change Password */}\n                <div>\n                  <h3 className=\"text-lg font-medium text-white mb-4\">Change Password</h3>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                        Current Password\n                      </label>\n                      <div className=\"relative\">\n                        <input\n                          type={showCurrentPassword ? \"text\" : \"password\"}\n                          value={passwordData.current_password}\n                          onChange={(e) => setPasswordData(prev => ({ ...prev, current_password: e.target.value }))}\n                          className=\"w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 pr-12 text-white focus:outline-none focus:border-sensual-red\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                        >\n                          {showCurrentPassword ? <EyeSlashIcon className=\"w-5 h-5\" /> : <EyeIcon className=\"w-5 h-5\" />}\n                        </button>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                        New Password\n                      </label>\n                      <div className=\"relative\">\n                        <input\n                          type={showNewPassword ? \"text\" : \"password\"}\n                          value={passwordData.new_password}\n                          onChange={(e) => setPasswordData(prev => ({ ...prev, new_password: e.target.value }))}\n                          className=\"w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 pr-12 text-white focus:outline-none focus:border-sensual-red\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowNewPassword(!showNewPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                        >\n                          {showNewPassword ? <EyeSlashIcon className=\"w-5 h-5\" /> : <EyeIcon className=\"w-5 h-5\" />}\n                        </button>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                        Confirm New Password\n                      </label>\n                      <input\n                        type=\"password\"\n                        value={passwordData.confirm_password}\n                        onChange={(e) => setPasswordData(prev => ({ ...prev, confirm_password: e.target.value }))}\n                        className=\"w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white focus:outline-none focus:border-sensual-red\"\n                      />\n                    </div>\n                    \n                    <button\n                      onClick={handlePasswordChange}\n                      disabled={saving || !passwordData.current_password || !passwordData.new_password || !passwordData.confirm_password}\n                      className=\"btn-primary px-6 py-2\"\n                    >\n                      {saving ? 'Changing...' : 'Change Password'}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Privacy Tab */}\n            {activeTab === 'privacy' && (\n              <div className=\"space-y-6\">\n                <h2 className=\"text-2xl font-semibold text-white mb-6\">Privacy Settings</h2>\n                \n                <div className=\"space-y-6\">\n                  <div className=\"bg-gray-800 rounded-lg p-6\">\n                    <h3 className=\"text-lg font-medium text-white mb-2\">Profile Visibility</h3>\n                    <p className=\"text-gray-400 text-sm mb-4\">\n                      Control who can see your profile information\n                    </p>\n                    \n                    {user?.role === 'provider' && (\n                      <div className=\"space-y-3\">\n                        <label className=\"flex items-center\">\n                          <input\n                            type=\"radio\"\n                            name=\"visibility\"\n                            defaultChecked\n                            className=\"text-sensual-red focus:ring-sensual-red\"\n                          />\n                          <span className=\"ml-2 text-gray-300\">Public - Anyone can view my profile</span>\n                        </label>\n                        <label className=\"flex items-center\">\n                          <input\n                            type=\"radio\"\n                            name=\"visibility\"\n                            className=\"text-sensual-red focus:ring-sensual-red\"\n                          />\n                          <span className=\"ml-2 text-gray-300\">Verified users only</span>\n                        </label>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"bg-gray-800 rounded-lg p-6\">\n                    <h3 className=\"text-lg font-medium text-white mb-2\">Data Management</h3>\n                    <p className=\"text-gray-400 text-sm mb-4\">\n                      Manage your data and account\n                    </p>\n                    \n                    <div className=\"space-y-3\">\n                      <button className=\"text-sensual-red hover:text-sensual-red-light text-sm\">\n                        Download my data\n                      </button>\n                      <br />\n                      <button className=\"text-red-400 hover:text-red-300 text-sm\">\n                        Delete account\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;